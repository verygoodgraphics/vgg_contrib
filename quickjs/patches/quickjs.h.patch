--- original/quickjs/quickjs.h	2022-11-18 18:50:21.000000000 +0800
+++ upstream/quickjs/quickjs.h	2022-11-27 19:54:37.000000000 +0800
@@ -27,21 +27,24 @@
 
 #include <stdio.h>
 #include <stdint.h>
+#include <math.h>
+#include "quickjs-version.h"
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 #if defined(__GNUC__) || defined(__clang__)
-#define js_likely(x)          __builtin_expect(!!(x), 1)
-#define js_unlikely(x)        __builtin_expect(!!(x), 0)
-#define js_force_inline       inline __attribute__((always_inline))
-#define __js_printf_like(f, a)   __attribute__((format(printf, f, a)))
+  #define js_likely(x)          __builtin_expect(!!(x), 1)
+  #define js_unlikely(x)        __builtin_expect(!!(x), 0)
+  #define js_force_inline       inline __attribute__((always_inline))
+  //#define __js_printf_like(A, B)   __attribute__((format(printf, (A), (B))))
+  #define __js_printf_like(A, B) /*doesn't work, why?*/
 #else
-#define js_likely(x)     (x)
-#define js_unlikely(x)   (x)
-#define js_force_inline  inline
-#define __js_printf_like(a, b)
+  #define js_likely(x)     (x)
+  #define js_unlikely(x)   (x)
+  #define js_force_inline  __forceinline
+  #define __js_printf_like(A, B) /* */
 #endif
 
 #define JS_BOOL int
@@ -53,6 +56,15 @@
 typedef uint32_t JSClassID;
 typedef uint32_t JSAtom;
 
+#ifdef CONFIG_STORAGE
+typedef enum JS_PERSISTENT_STATUS {
+  JS_NOT_PERSISTENT = 0,
+  JS_PERSISTENT_DORMANT = 1,
+  JS_PERSISTENT_LOADED = 2,
+  JS_PERSISTENT_MODIFIED = 3
+} JS_PERSISTENT_STATUS;
+#endif
+
 #if INTPTR_MAX >= INT64_MAX
 #define JS_PTR64
 #define JS_PTR64_DEF(a) a
@@ -64,6 +76,123 @@
 #define JS_NAN_BOXING
 #endif
 
+typedef struct JSRefCountHeader {
+    int ref_count;
+} JSRefCountHeader;
+
+#define JS_FLOAT64_NAN NAN
+
+#if defined(JS_STRICT_NAN_BOXING)
+
+  // This schema defines strict NAN boxing for both 32 and 64 versions
+
+  // This is a method of storing values in the IEEE 754 double-precision
+  // floating-point number. double type is 64-bit, comprised of 1 sign bit, 11
+  // exponent bits and 52 mantissa bits:
+  //    7         6        5        4        3        2        1        0
+  // seeeeeee|eeeemmmm|mmmmmmmm|mmmmmmmm|mmmmmmmm|mmmmmmmm|mmmmmmmm|mmmmmmmm
+  //
+
+  // s0000000|0000tttt|vvvvvvvv|vvvvvvvv|vvvvvvvv|vvvvvvvv|vvvvvvvv|vvvvvvvv
+  // NaN marker   |tag|  48-bit placeholder for values: pointers, strings
+  // all bits 0   | 4 |
+  // for non float|bit|
+
+  // Doubles contain non-zero in NaN marker field and are stored with bits inversed
+
+  // JS_UNINITIALIZED is strictly uint64_t(0)
+
+  enum {
+
+    JS_TAG_UNINITIALIZED = 0,
+    JS_TAG_INT = 1,
+    JS_TAG_BOOL = 2,
+    JS_TAG_NULL = 3,
+    JS_TAG_UNDEFINED = 4,
+    JS_TAG_CATCH_OFFSET = 5,
+    JS_TAG_EXCEPTION = 6,
+    JS_TAG_FLOAT64 = 7,
+
+    /* all tags with a reference count have 0b1000 bit */
+    JS_TAG_OBJECT = 8,
+    JS_TAG_FUNCTION_BYTECODE = 9, /* used internally */
+    JS_TAG_MODULE = 10, /* used internally */
+    JS_TAG_STRING = 11,
+    JS_TAG_SYMBOL = 12,
+    JS_TAG_BIG_FLOAT = 13,
+    JS_TAG_BIG_INT = 14,
+    JS_TAG_BIG_DECIMAL = 15,
+
+  };
+
+  typedef uint64_t JSValue;
+
+  #define JSValueConst JSValue
+
+  #define JS_VALUE_GET_TAG(v) (((v)>0xFFFFFFFFFFFFFull)? (unsigned)JS_TAG_FLOAT64 : (unsigned)((v) >> 48))
+
+  #define JS_VALUE_GET_INT(v)  (int)(v)
+  #define JS_VALUE_GET_BOOL(v) (int)(v)
+  #ifdef JS_PTR64
+  #define JS_VALUE_GET_PTR(v)  ((void *)((intptr_t)(v) & 0x0000FFFFFFFFFFFFull))
+  #else
+  #define JS_VALUE_GET_PTR(v)  ((void *)(intptr_t)(v))
+  #endif
+
+  #define JS_MKVAL(tag, val) (((uint64_t)(0xF & tag) << 48) | (uint32_t)(val))
+  #define JS_MKPTR(tag, ptr) (((uint64_t)(0xF & tag) << 48) | ((uint64_t)(ptr) & 0x0000FFFFFFFFFFFFull))
+
+  #define JS_NAN JS_MKVAL(JS_TAG_FLOAT64,0)
+  #define JS_INFINITY_NEGATIVE JS_MKVAL(JS_TAG_FLOAT64,1)
+  #define JS_INFINITY_POSITIVE JS_MKVAL(JS_TAG_FLOAT64,2)
+
+  static inline double JS_VALUE_GET_FLOAT64(JSValue v)
+  {
+    if (v > 0xFFFFFFFFFFFFFull) {
+    union { JSValue v; double d; } u;
+    u.v = ~v;
+    return u.d;
+  }
+    else if (v == JS_NAN)
+      return JS_FLOAT64_NAN;
+    else if (v == JS_INFINITY_POSITIVE)
+      return INFINITY;
+    else
+      return -INFINITY;
+  }
+
+  static inline JSValue __JS_NewFloat64(JSContext *ctx, double d)
+  {
+    union { double d; uint64_t u64; } u;
+    JSValue v;
+    u.d = d;
+    /* normalize NaN */
+    if (js_unlikely((u.u64 & 0x7ff0000000000000) == 0x7ff0000000000000)) {
+      if( isnan(d))
+      v = JS_NAN;
+      else if (d < 0.0)
+        v = JS_INFINITY_NEGATIVE;
+      else
+        v = JS_INFINITY_POSITIVE;
+    }
+    else
+      v = ~u.u64;
+    return v;
+  }
+
+  //#define JS_TAG_IS_FLOAT64(tag) ((tag & 0x7ff0) != 0)
+  #define JS_TAG_IS_FLOAT64(tag) (tag == JS_TAG_FLOAT64)
+
+  /* same as JS_VALUE_GET_TAG, but return JS_TAG_FLOAT64 with NaN boxing */
+  /* Note: JS_VALUE_GET_TAG already normalized in this packaging schema*/
+  #define JS_VALUE_GET_NORM_TAG(v) JS_VALUE_GET_TAG(v)
+
+  #define JS_VALUE_IS_NAN(v) (v == JS_NAN)
+
+  #define JS_VALUE_HAS_REF_COUNT(v) ((JS_VALUE_GET_TAG(v) & 0xFFF8) == 0x8)
+
+#else // !JS_STRICT_NAN_BOXING
+
 enum {
     /* all tags with a reference count are negative */
     JS_TAG_FIRST       = -11, /* first negative tag */
@@ -87,12 +216,6 @@
     /* any larger tag is FLOAT64 if JS_NAN_BOXING */
 };
 
-typedef struct JSRefCountHeader {
-    int ref_count;
-} JSRefCountHeader;
-
-#define JS_FLOAT64_NAN NAN
-
 #ifdef CONFIG_CHECK_JSVALUE
 /* JSValue consistency : it is not possible to run the code in this
    mode, but it is useful to detect simple reference counting
@@ -126,7 +249,7 @@
 {
     return 0;
 }
-    
+
 #elif defined(JS_NAN_BOXING)
 
 typedef uint64_t JSValue;
@@ -191,7 +314,7 @@
     tag = JS_VALUE_GET_TAG(v);
     return tag == (JS_NAN >> 32);
 }
-    
+
 #else /* !JS_NAN_BOXING */
 
 typedef union JSValueUnion {
@@ -244,12 +367,16 @@
 
 #endif /* !JS_NAN_BOXING */
 
+  #define JS_VALUE_HAS_REF_COUNT(v) ((unsigned)JS_VALUE_GET_TAG(v) >= (unsigned)JS_TAG_FIRST)
+
+#endif /* !JS_STRICT_NAN_BOXING */
+
 #define JS_VALUE_IS_BOTH_INT(v1, v2) ((JS_VALUE_GET_TAG(v1) | JS_VALUE_GET_TAG(v2)) == 0)
 #define JS_VALUE_IS_BOTH_FLOAT(v1, v2) (JS_TAG_IS_FLOAT64(JS_VALUE_GET_TAG(v1)) && JS_TAG_IS_FLOAT64(JS_VALUE_GET_TAG(v2)))
 
 #define JS_VALUE_GET_OBJ(v) ((JSObject *)JS_VALUE_GET_PTR(v))
 #define JS_VALUE_GET_STRING(v) ((JSString *)JS_VALUE_GET_PTR(v))
-#define JS_VALUE_HAS_REF_COUNT(v) ((unsigned)JS_VALUE_GET_TAG(v) >= (unsigned)JS_TAG_FIRST)
+
 
 /* special values */
 #define JS_NULL      JS_MKVAL(JS_TAG_NULL, 0)
@@ -355,6 +482,8 @@
 JSRuntime *JS_GetRuntime(JSContext *ctx);
 void JS_SetClassProto(JSContext *ctx, JSClassID class_id, JSValue obj);
 JSValue JS_GetClassProto(JSContext *ctx, JSClassID class_id);
+JSValue JS_GetClassName(JSContext *ctx, JSClassID class_id);
+
 
 /* the following functions are used to select the intrinsic object to
    save memory */
@@ -421,13 +550,19 @@
 JSAtom JS_NewAtomLen(JSContext *ctx, const char *str, size_t len);
 JSAtom JS_NewAtom(JSContext *ctx, const char *str);
 JSAtom JS_NewAtomUInt32(JSContext *ctx, uint32_t n);
+JSAtom JS_NewAtomLenRT(JSRuntime *rt, const char *str, int len);
+JSAtom JS_NewAtomSymbolLenRT(JSRuntime *rt, const char *str, int len);
+const char *JS_AtomGetStr(JSContext *ctx, char *buf, int buf_size, JSAtom atom);
+const char *JS_AtomGetStrRT(JSRuntime *rt, char *buf, int buf_size, JSAtom atom);
 JSAtom JS_DupAtom(JSContext *ctx, JSAtom v);
+JSAtom JS_DupAtomRT(JSRuntime *rt, JSAtom v);
 void JS_FreeAtom(JSContext *ctx, JSAtom v);
 void JS_FreeAtomRT(JSRuntime *rt, JSAtom v);
 JSValue JS_AtomToValue(JSContext *ctx, JSAtom atom);
 JSValue JS_AtomToString(JSContext *ctx, JSAtom atom);
 const char *JS_AtomToCString(JSContext *ctx, JSAtom atom);
 JSAtom JS_ValueToAtom(JSContext *ctx, JSValueConst val);
+int    JS_AtomIsArrayIndex(JSContext *ctx, uint32_t *pval, JSAtom atom);
 
 /* object class support */
 
@@ -436,6 +571,8 @@
     JSAtom atom;
 } JSPropertyEnum;
 
+void js_free_prop_enum(JSContext *ctx, JSPropertyEnum *tab, uint32_t len);
+
 typedef struct JSPropertyDescriptor {
     int flags;
     JSValue value;
@@ -443,6 +580,8 @@
     JSValue setter;
 } JSPropertyDescriptor;
 
+#define JS_PROCEED_WITH_DEFAULT 12345
+
 typedef struct JSClassExoticMethods {
     /* Return -1 if exception (can only happen in case of Proxy object),
        FALSE if the property does not exists, TRUE if it exists. If 1 is
@@ -464,7 +603,7 @@
                                int flags);
     /* The following methods can be emulated with the previous ones,
        so they are usually not needed */
-    /* return < 0 if exception or TRUE/FALSE */
+    /* return < 0 if exception or TRUE/FALSE or JS_PROCEED_WITH_DEFAULT */
     int (*has_property)(JSContext *ctx, JSValueConst obj, JSAtom atom);
     JSValue (*get_property)(JSContext *ctx, JSValueConst obj, JSAtom atom,
                             JSValueConst receiver);
@@ -521,9 +660,9 @@
 {
     JSValue v;
     if (val == (int32_t)val) {
-        v = JS_NewInt32(ctx, val);
+        v = JS_NewInt32(ctx, (int32_t)val);
     } else {
-        v = __JS_NewFloat64(ctx, val);
+        v = __JS_NewFloat64(ctx, (double)val);
     }
     return v;
 }
@@ -563,6 +702,9 @@
     return v;
 }
 
+JSValue JS_NewDate(JSContext* ctx, double ms_1970);
+JS_BOOL JS_IsDate(JSContext *ctx, JSValueConst obj, double* ms_since_1970);
+
 static inline JS_BOOL JS_IsNumber(JSValueConst v)
 {
     int tag = JS_VALUE_GET_TAG(v);
@@ -627,6 +769,8 @@
     return JS_VALUE_GET_TAG(v) == JS_TAG_OBJECT;
 }
 
+int JS_IsObjectPlain(JSContext *ctx, JSValueConst val); /* plain JS object, that is not function nor array nor anything else */
+
 JSValue JS_Throw(JSContext *ctx, JSValue obj);
 JSValue JS_GetException(JSContext *ctx);
 JS_BOOL JS_IsError(JSContext *ctx, JSValueConst val);
@@ -716,9 +860,21 @@
 JS_BOOL JS_IsFunction(JSContext* ctx, JSValueConst val);
 JS_BOOL JS_IsConstructor(JSContext* ctx, JSValueConst val);
 JS_BOOL JS_SetConstructorBit(JSContext *ctx, JSValueConst func_obj, JS_BOOL val);
+JS_BOOL JS_IsFunctionOfThisRealm(JSContext *ctx, JSValueConst val);
+
+JS_BOOL JS_AreFunctionsOfSameOrigin(JSContext *ctx, JSValue f1, JSValue f2);
+
+JSValue JS_GetUserClassName(JSContext *ctx, JSValueConst obj);
 
 JSValue JS_NewArray(JSContext *ctx);
 int JS_IsArray(JSContext *ctx, JSValueConst val);
+/* isArray and has 'tag' property */
+int     JS_IsTuple(JSContext *ctx, JSValueConst val);
+JSValue JS_GetTupleTag(JSContext *ctx, JSValueConst val);
+
+JSValue JS_NewFastArray(JSContext *ctx, int argc, JSValueConst *argv);
+/* Access an Array's internal JSValue array if available */
+int     JS_GetFastArray(JSContext *ctx, JSValueConst obj, JSValue **arrpp, uint32_t *countp);
 
 JSValue JS_GetPropertyInternal(JSContext *ctx, JSValueConst obj,
                                JSAtom prop, JSValueConst receiver,
@@ -733,6 +889,9 @@
 JSValue JS_GetPropertyUint32(JSContext *ctx, JSValueConst this_obj,
                              uint32_t idx);
 
+/* get .length property */
+int JS_GetPropertyLength(JSContext *ctx, int64_t *plength, JSValueConst obj);
+
 int JS_SetPropertyInternal(JSContext *ctx, JSValueConst this_obj,
                            JSAtom prop, JSValue val,
                            int flags);
@@ -753,6 +912,9 @@
 int JS_DeleteProperty(JSContext *ctx, JSValueConst obj, JSAtom prop, int flags);
 int JS_SetPrototype(JSContext *ctx, JSValueConst obj, JSValueConst proto_val);
 JSValue JS_GetPrototype(JSContext *ctx, JSValueConst val);
+JSValue JS_GetPrototypeOfDate(JSContext *ctx);
+
+int JS_CopyDataProperties(JSContext *ctx, JSValueConst target, JSValueConst source, JSValueConst excluded, int setprop);
 
 #define JS_GPN_STRING_MASK  (1 << 0)
 #define JS_GPN_SYMBOL_MASK  (1 << 1)
@@ -780,6 +942,8 @@
 /* 'input' must be zero terminated i.e. input[input_len] = '\0'. */
 JSValue JS_Eval(JSContext *ctx, const char *input, size_t input_len,
                 const char *filename, int eval_flags);
+JSValue JS_Eval2(JSContext *ctx, const char *input, size_t input_len,
+                const char *filename, int eval_flags, int line_no);
 /* same as JS_Eval() but with an explicit 'this_obj' parameter */
 JSValue JS_EvalThis(JSContext *ctx, JSValueConst this_obj,
                     const char *input, size_t input_len,
@@ -801,6 +965,7 @@
 void JS_SetOpaque(JSValue obj, void *opaque);
 void *JS_GetOpaque(JSValueConst obj, JSClassID class_id);
 void *JS_GetOpaque2(JSContext *ctx, JSValueConst obj, JSClassID class_id);
+JSClassID JS_GetClassID(JSValueConst obj, void** ppopaque);
 
 /* 'buf' must be zero terminated i.e. buf[buf_len] = '\0'. */
 JSValue JS_ParseJSON(JSContext *ctx, const char *buf, size_t buf_len,
@@ -890,8 +1055,8 @@
 #define JS_READ_OBJ_ROM_DATA  (1 << 1) /* avoid duplicating 'buf' data */
 #define JS_READ_OBJ_SAB       (1 << 2) /* allow SharedArrayBuffer */
 #define JS_READ_OBJ_REFERENCE (1 << 3) /* allow object references */
-JSValue JS_ReadObject(JSContext *ctx, const uint8_t *buf, size_t buf_len,
-                      int flags);
+JSValue JS_ReadObject(JSContext *ctx, const uint8_t *buf, size_t buf_len, int flags);
+JSValue JS_ReadObject2(JSContext *ctx, const uint8_t *buf, size_t buf_len, int flags, size_t* remnants_len);
 /* instantiate and evaluate a bytecode function. Only used when
    reading a script or module with JS_ReadObject() */
 JSValue JS_EvalFunction(JSContext *ctx, JSValue fun_obj);
@@ -905,6 +1070,9 @@
 JSModuleDef *JS_RunModule(JSContext *ctx, const char *basename,
                           const char *filename);
 
+JSValue JS_GetModuleExportItemStr(JSContext *ctx, JSModuleDef *m, const char *name);
+JSValue JS_GetModuleExportItem(JSContext *ctx, JSModuleDef *m, JSAtom atom);
+
 /* C function definition */
 typedef enum JSCFunctionEnum {  /* XXX: should rename for namespace isolation */
     JS_CFUNC_generic,
@@ -957,7 +1125,7 @@
 {
     return JS_NewCFunction2(ctx, (JSCFunction *)func, name, length, cproto, magic);
 }
-void JS_SetConstructor(JSContext *ctx, JSValueConst func_obj, 
+void JS_SetConstructor(JSContext *ctx, JSValueConst func_obj,
                        JSValueConst proto);
 
 /* C property definition */
@@ -1039,6 +1207,22 @@
 int JS_SetModuleExportList(JSContext *ctx, JSModuleDef *m,
                            const JSCFunctionListEntry *tab, int len);
 
+#ifdef CONFIG_DEBUGGER
+
+typedef JS_BOOL JSDebuggerCheckLineNoF(JSContext *ctx, JSAtom file_name, uint32_t line_no, const uint8_t *pc);
+
+void JS_SetBreakpointHandler(JSContext *ctx, JSDebuggerCheckLineNoF* line_hit_handler);
+void JS_SetDebuggerMode(JSContext *ctx, int onoff);
+
+uint32_t js_debugger_stack_depth(JSContext *ctx);
+JSValue  js_debugger_build_backtrace(JSContext *ctx, const uint8_t *cur_pc);
+JSValue  js_debugger_closure_variables(JSContext *ctx, int stack_index);
+JSValue  js_debugger_local_variables(JSContext *ctx, int stack_index);
+
+#endif
+
+void*    js_debugger_get_object_id(JSValue val);
+
 #undef js_unlikely
 #undef js_force_inline
 
